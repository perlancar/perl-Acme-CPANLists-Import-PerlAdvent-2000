<html>
<head>
<title>A Perl Module Advent Calendar</title></head>
<body bgcolor="#281093" text="white" link="yellow" vlink="yellow">





<p><img src="../../images/2000/21st.jpg" alt="21st" border="0" width="100" height="75">
<hr>




<A NAME="__index__"></A>
<!-- INDEX BEGIN -->

<UL>

	<LI><A HREF="#name">NAME</A></LI>
	<LI><A HREF="#synopsis">SYNOPSIS</A></LI>
	<LI><A HREF="#description">DESCRIPTION</A></LI>
	<UL>

		<LI><A HREF="#methods">Methods</A></LI>
	</UL>

	<LI><A HREF="#author">AUTHOR</A></LI>
</UL>
<!-- INDEX END -->

<HR>
<P>
<HR>
<H1><A NAME="name">NAME</A></H1>
<P>Class::Virtual - Base class for virtual base classes.</P>
<P>
<HR>
<H1><A NAME="synopsis">SYNOPSIS</A></H1>
<PRE>
  package My::Virtual::Idaho;
  use base qw(Class::Virtual);</PRE>
<PRE>
  __PACKAGE__-&gt;virtual_methods(new foo bar this that);</PRE>
<PRE>
  package My::Private::Idaho;
  use base qw(My::Virtual::Idaho);</PRE>
<PRE>
  # Check to make sure My::Private::Idaho implemented everything
  my @missing = __PACKAGE__-&gt;missing_methods;
  die __PACKAGE__ . ' forgot to implement ' . join ', ', @missing 
      if @missing;</PRE>
<PRE>
  # If My::Private::Idaho forgot to implement new(), the program will
  # halt and yell about that.
  my $idaho = My::Private::Idaho-&gt;new;</PRE>
<PRE>
  # See what methods we're obligated to implement.
  my @must_implement = __PACKAGE__-&gt;virtual_methods;</PRE>
<P>
<HR>
<H1><A NAME="description">DESCRIPTION</A></H1>
<P>This is a base class for implementing virtual base classes.  Kinda
kooky.  It allows you to explicitly declare what methods are virtual
and that must be implemented by subclasses.  This might seem silly,
since your program will halt and catch fire when an unimplemented
virtual method is hit anyway, but there's some benefits.</P>
<P>The error message is more informative.  Instead of the usual
``Can't locate object method'' error, you'll get one explaining that a
virtual method was left unimplemented.</P>
<P>Subclass authors can explicitly check to make sure they've implemented
all the necessary virtual methods.  When used as part of a regression
test, it will shield against the virtual method requirements changing
out from under the subclass.</P>
<P>Finally, subclass authors can get an explicit list of everything
they're expected to implement.</P>
<P>Doesn't hurt and it doesn't slow you down.</P>
<P>
<H2><A NAME="methods">Methods</A></H2>
<DL>
<DT><STRONG><A NAME="item_virtual_methods"><STRONG>virtual_methods</STRONG></A></STRONG><BR>
<DD>
<PRE>
  Virtual::Class-&gt;virtual_methods(@virtual_methods);
  my @must_implement = Sub::Class-&gt;virtual_methods;</PRE>
<P>This is an accessor to the list of virtual_methods.  Virtual base
classes will declare their list of virtual methods.  Subclasses will
look at them.  Once the virtual methods are set they cannot be undone.</P>
<P>XXX I'm tempted to make it possible for the subclass to override the
XXX virtual methods, perhaps add to them.  Too hairy to think about for
XXX 0.01.</P>
<DT><STRONG><A NAME="item_missing_methods"><STRONG>missing_methods</STRONG></A></STRONG><BR>
<DD>
<PRE>
  my @missing_methods = Sub::Class-&gt;missing_methods;</PRE>
<P>Returns a list of methods Sub::Class has not yet implemented.</P>
</DL>
<P>
<HR>
<H1><A NAME="author">AUTHOR</A></H1>
<P>Michael G Schwern &lt;<A HREF="mailto:schwern@pobox.com">schwern@pobox.com</A>&gt;</P>



</body>
</html>
