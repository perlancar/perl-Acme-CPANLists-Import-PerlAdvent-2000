
<html>
<head>
<title>A Perl Module Advent Calendar</title></head>
<body bgcolor="#281093" text="white" link="yellow" vlink="yellow">





<p><img src="../../images/2000/11th.jpg" alt="11th" border="0" width="100" height="75">
<hr>




<A NAME="__index__"></A>
<!-- INDEX BEGIN -->

<UL>

	<LI><A HREF="#name">NAME</A></LI>
	<LI><A HREF="#synopsis">SYNOPSIS</A></LI>
	<LI><A HREF="#description">DESCRIPTION</A></LI>
	<LI><A HREF="#methods">METHODS</A></LI>
	<UL>

		<LI><A HREF="#new">new</A></LI>
		<LI><A HREF="#load">load</A></LI>
		<LI><A HREF="#save">save</A></LI>
		<LI><A HREF="#set_color (r, g, b, a) or set_colour (r, g, b, a)">set_color (r, g, b, a) or set_colour (r, g, b, a)</A></LI>
		<LI><A HREF="#draw_point (x, y)">draw_point (x, y)</A></LI>
		<LI><A HREF="#draw_line (x1, y1, x2, y2)">draw_line (x1, y1, x2, y2)</A></LI>
		<LI><A HREF="#draw_rectangle (x, y, w, h)">draw_rectangle (x, y, w, h)</A></LI>
		<LI><A HREF="#fill_rectangle (x, y, w, h)">fill_rectangle (x, y, w, h)</A></LI>
		<LI><A HREF="#draw_ellipse (x, y, w, h)">draw_ellipse (x, y, w, h)</A></LI>
		<LI><A HREF="#fill_ellipse (x, y, w, h)">fill_ellipse (x, y, w, h)</A></LI>
		<LI><A HREF="#add_font_path (dir)">add_font_path (dir)</A></LI>
		<LI><A HREF="#load_font (font)">load_font (font)</A></LI>
		<LI><A HREF="#get_font_size (text)">get_font_size (text)</A></LI>
		<LI><A HREF="#draw_text (x, y, text)">draw_text (x, y, text)</A></LI>
		<LI><A HREF="#crop (x, y, w, h)">crop (x, y, w, h)</A></LI>
		<LI><A HREF="#blend (source_image, merge_alpha, sx, sy, sw, sh, dx, dy, dw, dh)">blend (source_image, merge_alpha, sx, sy, sw, sh, dx, dy, dw, dh)</A></LI>
	</UL>

	<LI><A HREF="#author">AUTHOR</A></LI>
	<LI><A HREF="#copyright">COPYRIGHT</A></LI>
</UL>
<!-- INDEX END -->

<HR>
<P>
<H1><A NAME="name">NAME</A></H1>
<P>Image::Imlib2 - Interface to the Imlib2 image library</P>
<P>
<HR>
<H1><A NAME="synopsis">SYNOPSIS</A></H1>
<PRE>
  use Image::Imlib2;</PRE>
<PRE>
  # create a new image
  my $image = Image::Imlib2-&gt;new(200, 200);</PRE>
<PRE>
  # set a colour (rgba, so this is transparent orange)
  $image-&gt;set_color(255, 127, 0, 127);</PRE>
<PRE>
  # draw a rectangle
  $image-&gt;draw_rectangle(50, 50, 50, 50);</PRE>
<PRE>
  # draw a filled rectangle
  $image-&gt;fill_rectangle(150, 50, 50, 50);</PRE>
<PRE>
  # draw a line
  $image-&gt;draw_line(0, 0, 200, 50);</PRE>
<PRE>
  # save out
  $image-&gt;save('out.png');</PRE>
<P>
<HR>
<H1><A NAME="description">DESCRIPTION</A></H1>
<P><STRONG>Image::Imlib2</STRONG> is a Perl port of Imlib2, a graphics library that
does image file loading and saving as well as manipulation, arbitrary
polygon support, etc. It does ALL of these operations FAST. It allows
you to create colour images using a large number of graphics
primitives, and output the images in a range of formats.</P>
<P>Note that this is the first version of my attempt at a Perl interface
to Imlib2. Currently, the API is just to test things out. Not
everything is supported, but a great deal of functionality already
exists. If you think the API can be tweaked to be a bit more
intuitive, drop me a line!</P>
<P>Note that a development version of Imlib2 must be installed before
installing this module: see the README file in the Image::Imlib2
package.</P>
<P>
<HR>
<H1><A NAME="methods">METHODS</A></H1>
<P>
<H2><A NAME="new">new</A></H2>
<P>This will create a new, blank image. If the dimensions aren't
specified, it will default to 256 x 256.</P>
<PRE>
  my $image = new Image::Imlib2-&gt;new(100, 100)</PRE>
<P>
<H2><A NAME="load">load</A></H2>
<P>This will load an existing graphics file and create a new image
object. It reads quite a few different image formats.</P>
<PRE>
  my $image = Image::Imlib2-&gt;load(&quot;foo.png&quot;);</PRE>
<P>
<H2><A NAME="save">save</A></H2>
<P>This saves the current image out. Currently this is always in PNG
format.</P>
<PRE>
  $image-&gt;save(&quot;out.png&quot;);</PRE>
<P>
<H2><A NAME="set_color (r, g, b, a) or set_colour (r, g, b, a)">set_color (r, g, b, a) or set_colour (r, g, b, a)</A></H2>
<P>This sets the colour that the drawing primitives will use. You specify
the red, green, blue and alpha components, which should all range from
0 to 255. The alpha component specified how transparent the colour is:
0 is fully transparent (so drawing with it will be pointless), 127 is
half-transparent, and 255 is fully opaque. Many examples:</P>
<PRE>
  $image-&gt;set_colour(255, 255, 255, 255); # white
  $image-&gt;set_colour(  0,   0,   0, 255); # black
  $image-&gt;set_colour(127, 127, 127, 255); # 50% gray
  $image-&gt;set_colour(255,   0,   0, 255); # red
  $image-&gt;set_colour(  0, 255,   0, 255); # green
  $image-&gt;set_colour(  0,   0, 255, 255); # blue
  $image-&gt;set_colour(255, 127,   0, 127); # transparent orange</PRE>
<P>
<H2><A NAME="draw_point (x, y)">draw_point (x, y)</A></H2>
<P>This colours a point in the image in the currently-selected
colour. Note that the coordinate system used has (0, 0) at the top
left, with (50, 0) to the right of the top left, (0, 50) below the top
left, and (50, 50) to the bottom right of the top left.</P>
<PRE>
  $image-&gt;draw_point(50, 50);</PRE>
<P>
<H2><A NAME="draw_line (x1, y1, x2, y2)">draw_line (x1, y1, x2, y2)</A></H2>
<P>This draws a line between two points in the currently-selected
colour. The following draws between the (0, 0) and (100, 100) points:</P>
<PRE>
  $image-&gt;draw_line(0, 0, 100, 100);</PRE>
<P>
<H2><A NAME="draw_rectangle (x, y, w, h)">draw_rectangle (x, y, w, h)</A></H2>
<P>This draws a the outline of a rectangle with the top left point at (x,
y) and having width w and height h in the current colour.</P>
<PRE>
  $image-&gt;draw_rectangle(0, 0, 50, 50);</PRE>
<P>
<H2><A NAME="fill_rectangle (x, y, w, h)">fill_rectangle (x, y, w, h)</A></H2>
<P>This draws a filled rectangle with the top left point at (x, y) and
having width w and height h in the current colour.</P>
<PRE>
  $image-&gt;fill_rectangle(0, 0, 50, 50);</PRE>
<P>
<H2><A NAME="draw_ellipse (x, y, w, h)">draw_ellipse (x, y, w, h)</A></H2>
<P>This draws an ellipse which has center (x, y) and horizontal amplitude
of w and vertical amplitude of h in the current colour. Note that
setting w and h to the same value will draw a circle.</P>
<PRE>
  $image-&gt;draw_ellipse(100, 100, 50, 50);</PRE>
<P>
<H2><A NAME="fill_ellipse (x, y, w, h)">fill_ellipse (x, y, w, h)</A></H2>
<P>This draws a filled ellipse which has center (x, y) and horizontal
amplitude of w and vertical amplitude of h in the current colour. Note
that setting w and h to the same value will draw a filled circle.</P>
<PRE>
  $image-&gt;fill_ellipse(100, 100, 50, 50);</PRE>
<P>
<H2><A NAME="add_font_path (dir)">add_font_path (dir)</A></H2>
<P>This function adds the directory path to the end of the current list
of directories to scan for truetype (TTF) fonts.</P>
<PRE>
  $image-&gt;add_font_path(&quot;./ttfonts&quot;);</PRE>
<P>
<H2><A NAME="load_font (font)">load_font (font)</A></H2>
<P>This function will load a truetype font from the first directory in
the font path that contains that font. The font name format is
``font_name/size''. For example. If there is a font file called cinema.ttf
somewhere in the font path you might use ``cinema/20'' to load a 20 pixel
sized font of cinema.</P>
<P>Note that this font will be used from now on, much like set_colour does
for colours.</P>
<PRE>
  $image-&gt;load_font(&quot;cinema/20&quot;);</PRE>
<P>
<H2><A NAME="get_font_size (text)">get_font_size (text)</A></H2>
<P>This function returns the width and height in pixels the text string
would use up if drawn with the current font.</P>
<PRE>
  my($w, $h) = $image-&gt;get_text_size(&quot;Imlib2 and Perl!&quot;);</PRE>
<P>
<H2><A NAME="draw_text (x, y, text)">draw_text (x, y, text)</A></H2>
<P>This draws the text using the current font and colour onto the image
at position (x, y).</P>
<PRE>
  $image-&gt;draw_text(50, 50, &quot;Groovy, baby, yeah!&quot;);</PRE>
<P>
<H2><A NAME="crop (x, y, w, h)">crop (x, y, w, h)</A></H2>
<P>This creates a duplicate of a x, y, width, height rectangle in the
current image and returns another image.</P>
<PRE>
  my $cropped_image = $image-&gt;crop(0, 0, 50, 50);</PRE>
<P>
<H2><A NAME="blend (source_image, merge_alpha, sx, sy, sw, sh, dx, dy, dw, dh)">blend (source_image, merge_alpha, sx, sy, sw, sh, dx, dy, dw, dh)</A></H2>
<P>This will blend the source rectangle x, y, width, height from the
source_image onto the current image at the destination x, y location
scaled to the width and height specified. If merge_alpha is set to 1
it will also modify the destination image alpha channel, otherwise the
destination alpha channel is left untouched.</P>
<PRE>
  $image-&gt;blend($cropped_image, 0, 0, 0, 50, 50, 200, 0, 50, 50);</PRE>
<P>
<HR>
<H1><A NAME="author">AUTHOR</A></H1>
<P>Leon Brocard, <A HREF="mailto:leon@astray.com">leon@astray.com</A></P>
<P>
<HR>
<H1><A NAME="copyright">COPYRIGHT</A></H1>
<P>Copyright (c) 2000 Leon Brocard. All rights reserved. This program is
free software; you can redistribute it and/or modify it under the same
terms as Perl itself.</P>


</body>

</html>
