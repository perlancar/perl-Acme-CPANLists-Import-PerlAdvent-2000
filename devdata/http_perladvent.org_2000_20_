<html>
<head>
<title>A Perl Module Advent Calendar</title></head>
<body bgcolor="#281093" text="white" link="yellow" vlink="yellow">





<p><img src="../../images/2000/20th.jpg" alt="20th" border="0" width="100" height="75">
<hr>




<A NAME="__index__"></A>
<!-- INDEX BEGIN -->

<UL>

	<LI><A HREF="#name">NAME</A></LI>
	<LI><A HREF="#synopsis">SYNOPSIS</A></LI>
	<LI><A HREF="#description">DESCRIPTION</A></LI>
	<UL>

		<LI><A HREF="#why inline">Why Inline?</A></LI>
		<LI><A HREF="#how it works">How it works</A></LI>
		<LI><A HREF="#another way to do it">Another Way To Do It</A></LI>
		<LI><A HREF="#configuration">Configuration</A></LI>
		<LI><A HREF="#configuration from the command line">Configuration from the Command Line</A></LI>
		<LI><A HREF="#writing modules with inline">Writing Modules with Inline</A></LI>
		<LI><A HREF="#fancy tricks">Fancy Tricks</A></LI>
	</UL>

	<LI><A HREF="#supported languages">SUPPORTED LANGUAGES</A></LI>
	<LI><A HREF="#supported platforms">SUPPORTED PLATFORMS</A></LI>
	<LI><A HREF="#see also">SEE ALSO</A></LI>
	<LI><A HREF="#bugs and deficiencies">BUGS AND DEFICIENCIES</A></LI>
	<LI><A HREF="#author">AUTHOR</A></LI>
	<LI><A HREF="#copyright">COPYRIGHT</A></LI>
</UL>
<!-- INDEX END -->

<HR>
<P>
<H1><A NAME="name">NAME</A></H1>
<P><STRONG>Inline</STRONG> - Use other programming languages inside Perl scripts and modules.</P>
<P>
<HR>
<H1><A NAME="synopsis">SYNOPSIS</A></H1>
<PRE>
    print &quot;9 + 16 = &quot;, add(9, 16), &quot;\n&quot;;
    print &quot;9 - 16 = &quot;, subtract(9, 16), &quot;\n&quot;;
</PRE>
<PRE>

    use Inline C =&gt; &lt;&lt;'END_OF_C_CODE';</PRE>
<PRE>

    int add(int x, int y) {
      return x + y;
    }</PRE>
<PRE>

    int subtract(int x, int y) {
      return x - y;
    }</PRE>
<PRE>

    END_OF_C_CODE</PRE>
<P>
<HR>
<H1><A NAME="description">DESCRIPTION</A></H1>
<P>The <CODE>Inline</CODE> module allows you to put source code from other programming languages directly ``inline'' in a Perl script or module. The code is automatically compiled as needed, and then loaded for immediate access from Perl.</P>
<P><CODE>Inline</CODE> saves you from the hassle of having to write and compile your own glue code using facilities like XS or SWIG. Simply type the code where you want it and run your Perl as normal. All the hairy details are handled for you. The compilation and installation of your code chunks all happen transparently; all you will notice is the delay of compilation.</P>
<P>The <CODE>Inline</CODE> code only gets compiled the first time you run it (or whenever it is modified) so you only take the performance hit once. Code that is Inlined into distributed modules (like on the CPAN) will get compiled when the module is installed, so the end user will never notice the compilation time.</P>
<P>Best of all, it works the same on both Unix and Microsoft Windows. See <A HREF="#supported platforms">SUPPORTED PLATFORMS</A> below.</P>
<P>
<H2><A NAME="why inline">Why Inline?</A></H2>
<P>Do you want to know ``Why would I use other languages in Perl?'' or ``Why should I use <CODE>Inline</CODE> to do it?''? I'll try to answer both.</P>
<DL>
<DT><STRONG><A NAME="item_Why_would_I_use_other_languages_in_Perl%3F">Why would I use other languages in Perl?</A></STRONG><BR>
<DD>
The most obvious reason is performance. For an interpreted language, Perl is very fast. Many people will say ``Anything Perl can do, C can do faster''. (They never mention the development time ;-) Anyway, you may be able to remove a bottleneck in your Perl code by using another language, without having to write the entire program in that language. This keeps your overall development time down, because you're using Perl for all of the non-critical code.
<P>Another reason is to access functionality from existing API-s that use the language. Some of this code may only be available in binary form. But by creating small subroutines in the native language, you can ``glue'' existing libraries to your Perl. As a user of the CPAN, you know that code reuse is a good thing. So why throw away those Fortran libraries just yet?</P>
<P>If you are using Inline with the C language (currently the only way to do it), then you can access the full internals of Perl itself. This opens up the floodgates to both extreme power and peril.</P>
<P>Maybe the best reason is ``Because you want to!''. Diversity keeps the world interesting. TMTOWTDI!</P>
<P></P>
<DT><STRONG><A NAME="item_Why_should_I_use_Inline_to_do_it%3F">Why should I use <CODE>Inline</CODE> to do it?</A></STRONG><BR>
<DD>
There are already two major facilities for extending Perl with C. They are XS and SWIG. Now if you're familiar with either, then I may be preaching to the choir. Well, here goes:
<PRE>
 &lt;SERMON&gt;</PRE>
<P>Greetings congregation. This morning I want to open your eyes to the virtues of <STRONG>Inline</STRONG> and the perils of <STRONG>XS</STRONG>. Let us compare the two.</P>
<P>---</P>
<P><STRONG>Inline -</STRONG> You can use it from a regular script.</P>
<P><STRONG>XS -</STRONG> Requires you to create a module and an XS file and a makefile, in addition to your regular script. Actually, the program <CODE>h2xs</CODE> does a nice job of getting you started, but that's still a lot of junk to maintain.</P>
<P>---</P>
<P><STRONG>XS -</STRONG> You need rebuild every time you want to test a small change.</P>
<P><STRONG>Inline -</STRONG> Perl programmers cannot be bothered with silly things like compiling. ``Tweak, Run, Tweak, Run'' is our way of life. <CODE>Inline</CODE> does all the dirty work for you.</P>
<P>---</P>
<P><STRONG>XS -</STRONG> There is a difficult learning curve involved with setting up and using the XS environment. (At least for a simple Perl preacher like me.) Read the following perldocs and man pages if you don't believe me:</P>
<PRE>
 * perlxs
 * perlxstut
 * perlapi
 * perlguts
 * perlmod
 * h2xs
 * xsubpp
 * ExtUtils::MakeMaker</PRE>
<P><STRONG>Inline -</STRONG> Makes easy things easy, and hard things possible. Just like Perl.</P>
<P>---</P>
<P><STRONG>XS -</STRONG> Only implements C and C++.</P>
<P><STRONG>Inline -</STRONG> Plans to implement several languages. For now, <CODE>Inline</CODE> only implements C and it uses XS to do it. (Dirty little secret) But this is the right thing to do. See <A HREF="#supported languages">SUPPORTED LANGUAGES</A> below.</P>
<P>---</P>
<P>Amen.</P>
<PRE>
 &lt;/SERMON&gt;</PRE>
<P></P></DL>
<P>
<H2><A NAME="how it works">How it works</A></H2>
<P><CODE>Inline</CODE> performs the following steps:</P>
<OL>
<LI><STRONG><A NAME="item_%29_Receive_the_Source_Code">) Receive the Source Code</A></STRONG><BR>

<CODE>Inline</CODE> gets the source code from your script or module with a statement like the following:
<PRE>
 use Inline C =&gt; Source-Code;</PRE>
<P>where <CODE>C</CODE> is the programming language of the source code, and <CODE>Source-Code</CODE> is a string (most easily represented by using the ``Here Document'' quoting style; see <A HREF="#synopsis">SYNOPSIS</A> above), a file name, an open file handle, or a reference to a subroutine (that will return source code).</P>
<P>Since <CODE>Inline</CODE> is coded in a ``<CODE>use</CODE>'' statement, everything is done during Perl's compile time. If anything needs to be done that will affect the <CODE>Source-Code</CODE> string, it needs to be done in a <CODE>BEGIN</CODE> block that is <EM>before</EM> the ``<CODE>use Inline ...</CODE>'' statement. This might include setting interpolated variables, or setting options in the <CODE>Inline::Config</CODE> module.</P>
<P></P>
<LI><STRONG><A NAME="item_%29_Check_if_the_Source_Code_has_been_Compiled">) Check if the Source Code has been Compiled</A></STRONG><BR>

<CODE>Inline</CODE> only needs to compile the source code if it has not yet been compiled. It accomplishes this seemingly magical task in an extremely simple and straightforward manner. It runs the source text through the <CODE>Digest::MD5</CODE> module to produce a 128-bit ``fingerprint'' which is virtually unique. The fingerprint (in hex) is <EM>mangled</EM> with the current package name (and the script name, if the package is ``<CODE>main</CODE>'') along with the name of the programming language, to form a unique name for the executable module. For instance, the <CODE>C</CODE> code from <CODE>examples/example001.pl</CODE> (see <A HREF="#examples in c">Examples In C</A>) would mangle into:
<PRE>
 main_C_example001_pl_3a9a7ba88a8fb10714be625de5e701f1.so</PRE>
<P>If an executable with that name already exists, then proceed to step 8. (No compilation is necessary)</P>
<P></P>
<LI><STRONG><A NAME="item_%29_Find_a_Place_to_Build_and_Install">) Find a Place to Build and Install</A></STRONG><BR>

At this point <CODE>Inline</CODE> knows it needs to compile the source code. The first thing to figure out is where to create the great big mess associated with compilation, and where to put the object when it's done.
<P>By default <CODE>Inline</CODE> will try to build and install under the first one of the following places that is a valid directory and is writable:</P>
<PRE>
     1) $ENV{PERL_INLINE_BLIB}
        (The PERL_INLINE_BLIB environment variable overrides all else)
     2) ./blib_I/  
        (The current directory, unless you're in your home directory)
     3) $bin/blib_I/
        (Where '$bin' is the directory that the script is in)
     4) $ENV{HOME}/blib_I/
        (Under your home directory)
     5) $ENV{HOME}/.blib_I/
        (Same as above but more discrete)</PRE>
<P>If none of those exist, Inline will attempt to create and use one of following:</P>
<PRE>
     6) $bin/blib_I/ 
     7) ./blib_I/</PRE>
<P>Failing that, Inline will croak. Optionally, you can configure <CODE>Inline</CODE> to build and install exactly where you want, using <CODE>Inline::Config</CODE>. See <A HREF="/Inline/Config.html">the Inline::Config manpage</A>.
</P>
<PRE>

If C&lt;$Inline::Config::SITE_INSTALL=1&gt;, then C&lt;Inline&gt; will only use C&lt;./blib_I/&gt; to build in, and the C&lt;$Config{installsitearch}&gt; directory to install the executable in. This option is intended to be used in modules that are to be distributed on the CPAN, so that they get installed in the proper place.</PRE>
<P>Optionally, you can configure <CODE>Inline</CODE> to build and install exactly where you want.</P>
<P><STRONG>NOTE</STRONG>: <CODE>blib</CODE> stands for ``build library'' in Perl-speak. It is a directory that gets created when you install a Perl module on your system. <CODE>blib_I</CODE> is the <CODE>Inline.pm</CODE> version of the same concept.</P>
<P></P>
<LI><STRONG><A NAME="item_%29_Parse_the_Source_for_Semantic_Cues">) Parse the Source for Semantic Cues</A></STRONG><BR>

<CODE>Inline</CODE> uses the module <CODE>Parse::RecDescent</CODE> to parse through your chunks of source code and look for things that it can create run-time bindings to. For instance, in <CODE>C</CODE> it looks for all of the function definitions and breaks them down into names and data types. These elements are used to correctly bind the <CODE>C</CODE> function to a <CODE>Perl</CODE> subroutine.
<P></P>
<LI><STRONG><A NAME="item_%29_Create_the_Build_Environment">) Create the Build Environment</A></STRONG><BR>

Now <CODE>Inline</CODE> can take all of the gathered information and create an environment to build your source code into an executable. Without going into all the details, it just creates the appropriate directories, creates the appropriate source files including an XS file and a <CODE>Makefile.PL</CODE>.
<P></P>
<LI><STRONG><A NAME="item_%29_Compile_the_Code_and_Install_the_Executable">) Compile the Code and Install the Executable</A></STRONG><BR>

The planets are in alignment. Now for the easy part. <CODE>Inline</CODE> just does what you would do to install a module. ``<CODE>perl Makefile.PL &amp;&amp; make &amp;&amp; make test &amp;&amp; make install</CODE>''. If something goes awry, <CODE>Inline</CODE> will croak with a message indicating where to look for more info.
<P></P>
<LI><STRONG><A NAME="item_%29_Tidy_Up">) Tidy Up</A></STRONG><BR>

By default, <CODE>Inline</CODE> will remove all of the mess created by the build process, assuming that everything worked. If the compile fails, <CODE>Inline</CODE> will leave everything intact, so that you can debug your errors. Setting <CODE>$Inline::Config::CLEAN_AFTER_BUILD=0</CODE> will also stop <CODE>Inline</CODE> from cleaning up.
<P></P>
<LI><STRONG><A NAME="item_%29_DynaLoad_the_Executable">) DynaLoad the Executable</A></STRONG><BR>

<CODE>Inline</CODE> uses the <CODE>DynaLoader::bootstrap</CODE> method to pull your external module into <CODE>Perl</CODE> space. Now you can call all of your external functions like Perl subroutines. Wheeee!
<P></P></OL>
<P>
<H2><A NAME="another way to do it">Another Way To Do It</A></H2>
<P>Instead of specifying the source code as a here-document string, you may want to put it at the end of your script, after the <CODE>__END__</CODE> statement. Then you can pass it to <CODE>Inline</CODE> using the <CODE>DATA</CODE> filehandle, like this:</P>
<PRE>
    use Inline;
    Inline-&gt;import(C =&gt; &lt;DATA&gt;);
</PRE>
<PRE>

    print &quot;9 + 16 = &quot;, add(9, 16), &quot;\n&quot;;
    print &quot;9 - 16 = &quot;, subtract(9, 16), &quot;\n&quot;;</PRE>
<PRE>

    __END__</PRE>
<PRE>

    int add(int x, int y) {
      return x + y;
    }</PRE>
<PRE>

    int subtract(int x, int y) {
      return x - y;
    }</PRE>
<P>Since the <CODE>use</CODE> command is executed at compile time and the <CODE>DATA</CODE> filehandle isn't available until runtime, you'll need to invoke the <CODE>import</CODE> call manually. This is a useful idiom anytime you need to specify <CODE>Inline</CODE> code at runtime.</P>
<P>
<H2><A NAME="configuration">Configuration</A></H2>
<P><CODE>Inline</CODE> trys to do the right thing as often as possible. But sometimes you may need to override the default actions. This is where <CODE>Inline::Config</CODE> comes to the rescue. <CODE>Inline::Config</CODE> gives you a more fine-grained control over the entire process. The other side of that coin is ``you need to know what you are doing''.</P>
<P>An important point to remember is that the config settings must be done <EM>before</EM> the <CODE>Inline</CODE> code is evaluated. Since a ``<CODE>use</CODE>'' happens at (<CODE>Perl</CODE>'s) compile time, you may need to something like this:</P>
<PRE>
    BEGIN {
        use Inline;
        $Inline::Config::OPTION_NUMBER_9 = 'Yes';
    # or
        Inline::Config-&gt;new-&gt;option_number_9('Yes');
    }
</PRE>
<PRE>

    use Inline C =&gt; &quot;C code goes here...&quot;;</PRE>
<P>See <A HREF="/Inline/Config.html">the Inline::Config manpage</A> for more info.</P>
<P>
<H2><A NAME="configuration from the command line">Configuration from the Command Line</A></H2>
<P><CODE>Inline</CODE> lets you set many of the configuration options from the command line. This can be very handy, especially when you only want to set the options temporarily, for say, debugging.</P>
<P>For instance, to get some general information about your <CODE>Inline</CODE> code in the script <CODE>Foo.pl</CODE>, use the command:</P>
<PRE>
    perl -MInline=INFO Foo.pl</PRE>
<P>If you want to force your code to compile, even if its already done, use:</P>
<PRE>
    perl -MInline=FORCE Foo.pl</PRE>
<P>If you want to do both, use:</P>
<PRE>
    perl -MInline=INFO -MInline=FORCE Foo.pl</PRE>
<P>or better yet:</P>
<PRE>
    perl -MInline=INFO,FORCE Foo.pl</PRE>
<P>See <A HREF="/Inline/Config.html">the Inline::Config manpage</A> for more info.</P>
<P>
<H2><A NAME="writing modules with inline">Writing Modules with Inline</A></H2>
<P>Writing CPAN modules that use other programming languages is easy with <CODE>Inline</CODE>. Let's say that you wanted to write a module called <CODE>Math::Simple</CODE> using the previous example code. Start by using the following command:</P>
<PRE>
    h2xs -PAXn Math::Simple</PRE>
<P>This will generate a bunch of files that form a skeleton of what you need for a distributable module. Next, modify the <CODE>Simple.pm</CODE> file to look like this:</P>
<PRE>
    package Math::Simple;
</PRE>
<PRE>

    use strict;
    use vars qw($VERSION @ISA @EXPORT_OK);
    require Exporter;
    @ISA = qw(Exporter);
    @EXPORT_OK = qw(add subtract);
    BEGIN {
        $VERSION = '0.01';
    }</PRE>
<PRE>

    use Inline;
    Inline-&gt;import(C =&gt; &lt;DATA&gt;);</PRE>
<PRE>

    1;</PRE>
<PRE>

    __DATA__</PRE>
<PRE>

    int add(int x, int y) {
      return x + y;
    }</PRE>
<PRE>

    int subtract(int x, int y) {
      return x - y;
    }</PRE>
<P>Finally, you need to add the following line to the top of your <CODE>test.pl</CODE> file:</P>
<PRE>
    use Inline SITE_INSTALL;</PRE>
<P>When the person installing <CODE>Math::Simple</CODE> does a ``<CODE>make test</CODE>'', the <CODE>Inline</CODE> module will compile the Inlined code and place the executable code into the <CODE>./blib</CODE> directory. Then when a ``<CODE>make install</CODE>'' is done, the module will be copied into Perl's <CODE>$Config{installsitearch}</CODE> directory (which is where an installed module should go).</P>
<P>Now all you need to do is:</P>
<PRE>
    perl Makefile.PL
    make dist</PRE>
<P>That will generate the file <CODE>Math-Simple-0.01.tar.gz</CODE> which is a distributable package.</P>
<P>
<H2><A NAME="fancy tricks">Fancy Tricks</A></H2>
<P>The <CODE>Inline</CODE> module opens up all sorts of possibilities regarding what you can do with <CODE>Perl</CODE> and <CODE>C</CODE>. Since everything happens at run time (depending on how you think of it) you can generate <CODE>C</CODE> code on the fly and effectively '<CODE>eval</CODE>' it. (How this might be useful is left as an exercise to the reader :-)</P>
<P>Here is how you would code such a beast:</P>
<PRE>
    BEGIN {$c_code = &amp;c_code_generator()}
    use Inline C =&gt; $c_code;  # will die if code doesn't compile
    my_function();</PRE>
<P>or</P>
<PRE>
    $c_code = &amp;c_code_generator();
    eval {use Inline C =&gt; $c_code};
    if ($@) {
        handle_error($@);     # trap error if code doesn't compile
    }
    else {
        my_function();
    }</PRE>
<P>
<HR>
<H1><A NAME="supported languages">SUPPORTED LANGUAGES</A></H1>
<P>Currently, ``<CODE>C</CODE>'' is the only supported language. This is obviously the most important language to support. That is because <CODE>Perl</CODE> itself is written in <CODE>C</CODE>. By giving a your <CODE>Perl</CODE> scripts access to <CODE>C</CODE>, you in effect give them access to the entire glorious internals of <CODE>Perl</CODE>. (Caveat scriptor :-)</P>
<P><CODE>C</CODE> is also the easiest language to implement because the tools needed to do so, (like XS and <CODE>ExtUtils::MakeMaker</CODE>) have already been written and are very flexible and reliable. <CODE>Inline</CODE> currently makes use of these pre-existing tools.</P>
<P>But there is definitely no reason why <CODE>Inline</CODE> must or should stop with <CODE>C</CODE>. As long as sensible bindings can be defined between Perl and another language, that language could be a candidate for the <CODE>Inline</CODE> module. Current languages I am considering adding support for include:</P>
<PRE>
 - C++
 - Fortran
 - Pascal
 - Python</PRE>
<P><STRONG>Note:</STRONG> Since many <CODE>C</CODE> compilers allow the use of assembly code within C, you may want to consider Assembly Language as supported. Ready to start scripting out new device drivers?</P>
<P>
<HR>
<H1><A NAME="supported platforms">SUPPORTED PLATFORMS</A></H1>
<P>This module should work anywhere that CPAN extension modules (those that use XS) can be installed, using the typical install format of:</P>
<PRE>
    perl Makefile.PL
    make
    make test
    make install</PRE>
<P>It has been tested on many Unix variants and Windows NT.</P>
<P><STRONG>NOTE</STRONG>: <CODE>Inline.pm</CODE> requires Perl 5.005 or higher because <CODE>Parse::RecDescent</CODE> requires it. (Something to do with the <CODE>qr</CODE> operator)</P>
<P>Inline has been tested on the following platforms:</P>
<PRE>
 V#   OS      OS V#   Perl V# Human              Email 
 0.25 Linux   2.2.13  5.00503 Brian Ingerson     ingy@cpan.org
 0.25 Linux   2.2.13  5.6     Brian Ingerson     ingy@cpan.org
 0.20 FreeBSD 3.4     5.00503 Timothy A Gregory  tgregory@tarjema.com      
 0.20 FreeBSD 4.0     5.00503 Timothy A Gregory  tgregory@tarjema.com      
 0.20 FreeBSD 4.0     5.6     Timothy A Gregory  tgregory@tarjema.com      
 0.20 Linux   2.0.36  5.00503 Prakasa Bellam     pbellam@cobaltgroup.com
 0.20 HPUX    B.10.20 5.00503 Jamie Shaffer      jshaffer@chronology.com
 0.20 SunOS   5.6     5.6.0   Jamie Shaffer      jshaffer@chronology.com
 0.20 SunOS   5.5.1   5.6.0   Jamie Shaffer      jshaffer@chronology.com
 0.22 OpenBSD 2.7     5.6.0   Jeremy Devenport   jeremy@weezel.com
 0.22 FreeBSD 3.1     5.00503 Doug Beaver        dougb@scalar.org
 0.25 WinNT   4.0 sp6 5.00503 Brian Ingerson     ingy@cpan.org
 0.24 Cygwin  1.1.1   5.6.0   Leo Schalkwyk      L.Schalkwyk@iop.kcl.ac.uk</PRE>
<P>The Microsoft tests deserve a little more explanation. I used the following:</P>
<PRE>
 Windows NT 4.0 (service pack 6)
 Perl 5.005_03 (ActiveState build 522)
 MS Visual C++ 6.0
 The &quot;nmake&quot; make utility (distributed w/ Visual C++)</PRE>
<P><CODE>Inline.pm</CODE> pulls all of its base configuration (including which <CODE>make</CODE> utility to use) from <CODE>config.pm</CODE>. Since your MSWin32 version of Perl probably came from ActiveState (as a binary distribution) the <CODE>Config.pm</CODE> will indicate that <CODE>nmake</CODE> is the system's <CODE>make</CODE> utility. That is because ActiveState uses Visual C++ to compile Perl.</P>
<P>To install <CODE>Inline.pm</CODE> (or any other CPAN module) on MSWin32 w/ Visual C++, use these:</P>
<PRE>
    perl Makefile.PL
    nmake
    nmake test
    nmake install</PRE>
<P>The ``Cygwin'' test was done on a Windows 98 machine using the Cygwin Unix/Win32 porting layer software from Cygnus. The <CODE>perl</CODE> binary on this machine was also compiled using the Cygwin tool set (<CODE>gcc</CODE>). This software is freely available from <A HREF="http://sources.redhat.com/cygwin/">http://sources.redhat.com/cygwin/</A></P>
<P>If <CODE>Inline</CODE> works on your platform, please email me the info above. If it doesn't work, see <A HREF="#bugs and deficiencies">BUGS AND DEFICIENCIES</A> below.</P>
<P>
<HR>
<H1><A NAME="see also">SEE ALSO</A></H1>
<P><A HREF="/Inline/Config.html">the Inline::Config manpage</A> and <A HREF="/Inline/C/Tutorial.html">the Inline::C::Tutorial manpage</A></P>
<P>
<HR>
<H1><A NAME="bugs and deficiencies">BUGS AND DEFICIENCIES</A></H1>
<P>This is <STRONG>ALPHA</STRONG> code. The interface may still change.</P>
<P>When reporting a bug, please do the following:</P>
<PRE>
 - Put &quot;use Inline REPORTBUG;&quot; at the top of your code, or
   use the command line option &quot;perl -MInline=REPORTBUG ...&quot;.
 - Run your code.
 - Follow the printed directions.</PRE>
<P>Here are some things to watch out for:</P>
<OL>
<LI>
The <CODE>Parse::RecDescent</CODE> grammar for <CODE>C</CODE> is fledgling. It'll get better. For now be careful and examine the generated code when things don't work. Also, using ``<CODE>perl -MInline=INFO ...</CODE>'' will give you useful information.
<P></P>
<LI>
<CODE>Inline</CODE> doesn't yet support custom typemapping. To pass anything beyond basic C types, use the type <CODE>SV*</CODE> and do your own conversions ``inline''. See <A HREF="/Inline/C/Tutorial.html">the Inline::C::Tutorial manpage</A> for more information on programming with C.
<P></P>
<LI>
While <CODE>Inline</CODE> does attempt to clean up after itself, there is currently no functionality to remove a shared object when a new version is compiled. This shouldn't be hard to do, but I want to think about it a little more.
<P></P>
<LI>
The compile time using Visual C++ on MSWin32 seems to be much slower in my tests so far. During this time, your script will seem to hang. Just be patient. After compilation, the execution time is comparable.
<P></P></OL>
<P>
<HR>
<H1><A NAME="author">AUTHOR</A></H1>
<P>Brian Ingerson &lt;<A HREF="mailto:INGY@cpan.org">INGY@cpan.org</A>&gt;</P>
<P>
<HR>
<H1><A NAME="copyright">COPYRIGHT</A></H1>
<P>Copyright (c) 2000, Brian Ingerson. All Rights Reserved.  This module is free software. It may be used, redistributed and/or modified under the terms of the Perl Artistic License.</P>
<P>(see <A HREF="http://www.perl.com/perl/misc/Artistic.html)">http://www.perl.com/perl/misc/Artistic.html)</A></P>



</body>
</html>
