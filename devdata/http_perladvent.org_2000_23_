<html>
<head>
<title>A Perl Module Advent Calendar</title></head>
<body bgcolor="#281093" text="white" link="yellow" vlink="yellow">





<p><img src="../../images/2000/23rd.jpg" alt="23rd" border="0" width="100" height="75">
<hr>




<A NAME="__index__"></A>
<!-- INDEX BEGIN -->

<UL>

	<LI><A HREF="#name">NAME</A></LI>
	<LI><A HREF="#synopsis">SYNOPSIS</A></LI>
	<LI><A HREF="#description">DESCRIPTION</A></LI>
	<LI><A HREF="#caveat">CAVEAT</A></LI>
	<LI><A HREF="#acknowledgements">ACKNOWLEDGEMENTS</A></LI>
	<LI><A HREF="#author">AUTHOR</A></LI>
	<LI><A HREF="#see also">SEE ALSO</A></LI>
</UL>
<!-- INDEX END -->

<HR>
<P>
<H1><A NAME="name">NAME</A></H1>
<P>Symbol::Approx::Sub - Perl module for calling subroutines by approximate names!</P>
<P>
<HR>
<H1><A NAME="synopsis">SYNOPSIS</A></H1>
<PRE>
  use Symbol::Approx::Sub;
</PRE>
<PRE>

  sub a {
    # blah...
  }</PRE>
<PRE>
  &amp;aa; # executes &amp;a if &amp;aa doesn't exist.</PRE>
<PRE>
  use Symbol::Approx::Sub (match =&gt; 'text_metaphone');
  use Symbol::Approx::Sub (match =&gt; 'string_approx');
  use Symbol::Approx::Sub (match =&gt; 'text_soundex');
  use Symbol::Approx::Sub (match =&gt; \&amp;my_matcher);
  use Symbol::Approx::Sub (match =&gt; \&amp;my_matcher, choose =&gt; \&amp;my_chooser);</PRE>
<P>
<HR>
<H1><A NAME="description">DESCRIPTION</A></H1>
<P>This is _really_ stupid. This module allows you to call subroutines by
_approximate_ names. Why you would ever want to do this is a complete
mystery to me. It was written as an experiment to see how well I 
understood typeglobs and AUTOLOADing.</P>
<P>To use it, simply include the line:</P>
<PRE>
  use Symbol::Approx::Sub;</PRE>
<P>somewhere in your program. Then each time you call a subroutine that doesn't
exist in the the current package Perl will search for a subroutine with
approximately the same name. The meaning of 'approximately the same' is
configurable. The default is to find subroutines with the same Soundex
value (as defined by Text::Soundex) as the missing subroutine. There are
two other built-in matching styles using Text::MetaPhone and 
String::Approx. To use either of these use:</P>
<PRE>
  use Symbol::Approx::Sub (match =&gt; 'text_metaphone');</PRE>
<P>or</P>
<PRE>
  use Symbol::Approx::Sub (match =&gt; 'string_approx');</PRE>
<P>when using Symbol::Approx::Sub.</P>
<P>You can also use your own subroutine to do the matching. Your subroutine
should expect to receive the name of the missing subroutine followed by
a list containing all valid subroutine names and should return a list
of all matching subroutines. For example:</P>
<PRE>
  sub my_matcher {
    my $sub_wanted = shift;</PRE>
<PRE>
    my @subs = @_;</PRE>
<PRE>
    return @subs;
}</PRE>
<P>This example isn't particularly useful as it says that all subroutine
names are an equally good match. To use this match subroutine in place of 
the standard ones, give Symbol::Approx::Sub a reference to the subroutine 
like this:</P>
<PRE>
  use Symbol::Approx::Sub (match =&gt; \&amp;my_matcher);</PRE>
<P>Having retrieved a list of matches, we need to select one of them to
run. The default behaviour is to pick one at random, but again you can
configure this behaviour by writing a subroutine. This subroutine will be
passed a list of matching subroutine names and should return the name of
the subroutine to run. For example:</P>
<PRE>
  sub my_chooser {
    return shift;
  }</PRE>
<P>which will return the first subroutine name in the list. To make 
Symbol::Approx::Sub use this subroutine in place of the standard one, 
give Symbol::Approx::Sub a reference to the subroutine like this:</P>
<PRE>
  use Symbol::Approx::Sub (choose =&gt; \&amp;my_chooser);</PRE>
<P>You can, of course, define both a matcher and a chooser like this:</P>
<PRE>
  use Symbol::Approx::Sub (match =&gt; \&amp;my_matcher, choose =&gt; \&amp;my_chooser);</PRE>
<P>or use you own chooser in conjunction with a standard matcher like this:</P>
<PRE>
  use Symbol::Approx::Sub (match =&gt; 'text_metaphone',
                           choose =&gt; \&amp;my_chooser);</PRE>
<P>
<HR>
<H1><A NAME="caveat">CAVEAT</A></H1>
<P>I can't stress too strongly that this will make your code completely 
unmaintainable and you really shouldn't use this module unless you're 
doing something very stupid.</P>
<P>
<HR>
<H1><A NAME="acknowledgements">ACKNOWLEDGEMENTS</A></H1>
<P>This idea came to me whilst sitting in Mark-Jason Dominus' ``Tricks of
the Wizards'' tutorial. In order to protect his reputation I should
probably point out that just as the idea was forming in my head he
clearly said that this kind of thing was a very bad idea.</P>
<P>Leon Brocard is clearly as mad as me as he pointed out some important bugs
and helped massively with the 'fuzzy-configurability'.</P>
<P>Matt Freake helped by pointing out that Perl generally does what you
mean, not what you think it should do.</P>
<P>Robin Houston spotted some nasty problems and (more importantly) supplied
patches.</P>
<P>
<HR>
<H1><A NAME="author">AUTHOR</A></H1>
<P>Dave Cross &lt;<A HREF="mailto:dave@dave.org.uk">dave@dave.org.uk</A>&gt;</P>
<P>With lots of help from Leon Brocard &lt;<A HREF="mailto:leon@astray.com">leon@astray.com</A>&gt;</P>
<P>
<HR>
<H1><A NAME="see also">SEE ALSO</A></H1>
<P>perl(1).</P>


</body>
</html>
