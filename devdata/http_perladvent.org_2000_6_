<html>
<head>
<title>A Perl Module Advent Calendar</title></head>
<body bgcolor="#281093" text="white" link="yellow" vlink="yellow">





<p><img src="../../images/2000/6th.jpg" alt="6th" border="0" width="100" height="75">
<hr>




<A NAME="__index__"></A>
<!-- INDEX BEGIN -->

<UL>

	<LI><A HREF="#name">NAME</A></LI>
	<LI><A HREF="#synopsis">SYNOPSIS</A></LI>
	<LI><A HREF="#description">DESCRIPTION</A></LI>
	<LI><A HREF="#usage">USAGE</A></LI>
	<UL>

		<LI><A HREF="#date calculations">Date Calculations</A></LI>
		<LI><A HREF="#date comparisons">Date Comparisons</A></LI>
		<LI><A HREF="#global overriding">Global Overriding</A></LI>
	</UL>

	<LI><A HREF="#author">AUTHOR</A></LI>
	<UL>

		<LI><A HREF="#license">License</A></LI>
		<LI><A HREF="#bugs">Bugs</A></LI>
	</UL>

</UL>
<!-- INDEX END -->

<HR>
<P>
<H1><A NAME="name">NAME</A></H1>
<P>Time::Object - Object Oriented time objects</P>
<P>
<HR>
<H1><A NAME="synopsis">SYNOPSIS</A></H1>
<PRE>
    use Time::Object;
</PRE>
<PRE>

    my $t = localtime;
    print &quot;Time is $t\n&quot;;
    print &quot;Year is &quot;, $t-&gt;year, &quot;\n&quot;;</PRE>
<P>
<HR>
<H1><A NAME="description">DESCRIPTION</A></H1>
<P>This module replaces the standard localtime and gmtime functions with
implementations that return objects. It does so in a backwards
compatible manner, so that using localtime/gmtime in the way documented
in perlfunc will still return what you expect.</P>
<P>The module actually implements most of an interface described by
Larry Wall on the perl5-porters mailing list here:
<A HREF="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-01/msg00241.html">http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-01/msg00241.html</A></P>
<P>
<HR>
<H1><A NAME="usage">USAGE</A></H1>
<P>After importing this module, when you use localtime or gmtime in a scalar
context, rather than getting an ordinary scalar string representing the
date and time, you get a Time::Object object, whose stringification happens
to produce the same effect as the localtime and gmtime functions. There is 
also a <CODE>new()</CODE> constructor provided, which is the same as localtime(), except
when passed a Time::Object object, in which case it's a copy constructor. The
following methods are available on the object:</P>
<PRE>
    $t-&gt;sec               # also available as $t-&gt;second
    $t-&gt;min               # also available as $t-&gt;minute
    $t-&gt;hour
    $t-&gt;mday              # also available as $t-&gt;day_of_month
    $t-&gt;mon               # based at 1
    $t-&gt;_mon              # based at 0
    $t-&gt;monname           # February
    $t-&gt;month             # same as $t-&gt;monname
    $t-&gt;year              # based at 0 (year 0 AD is, of course 1 BC).
    $t-&gt;_year             # year minus 1900
    $t-&gt;yr                # 2 digit year
    $t-&gt;wday              # based at 1 = Sunday
    $t-&gt;_wday             # based at 0 = Sunday
    $t-&gt;day_of_week       # based at 0 = Sunday
    $t-&gt;wdayname          # Tuesday
    $t-&gt;day               # same as wdayname
    $t-&gt;yday              # also available as $t-&gt;day_of_year
    $t-&gt;isdst             # also available as $t-&gt;daylight_savings
    $t-&gt;hms               # 01:23:45
    $t-&gt;ymd               # 2000/02/29
    $t-&gt;mdy               # 02/29/2000
    $t-&gt;dmy               # 29/02/2000
    $t-&gt;date              # Tue Feb 29 01:23:45 2000
    &quot;$t&quot;                  # same as $t-&gt;date
    $t-&gt;epoch             # seconds since the epoch
    $t-&gt;tzoffset          # timezone offset in a Time::Seconds object
    $t-&gt;strftime(FORMAT)  # same as POSIX::strftime (without POSIX.pm)</PRE>
<P>
<H2><A NAME="date calculations">Date Calculations</A></H2>
<P>It's possible to use simple addition and subtraction of objects:</P>
<PRE>
    use Time::Seconds;
</PRE>
<PRE>

        my $seconds = $t1 - $t2;
        $t1 += ONE_DAY; # add 1 day (constant from Time::Seconds)</PRE>
<P>The following are valid ($t1 and $t2 are Time::Object objects):</P>
<PRE>
        $t1 - $t2; # returns Time::Seconds object
        $t1 - 42; # returns Time::Object object
        $t1 + 533; # returns Time::Object object</PRE>
<P>However adding a Time::Object object to another Time::Object object
will cause a runtime error.</P>
<P>Note that the first of the above returns a Time::Seconds object, so
while examining the object will print the number of seconds (because
of the overloading), you can also get the number of minutes, hours,
days, weeks and years in that delta, using the Time::Seconds API.</P>
<P>
<H2><A NAME="date comparisons">Date Comparisons</A></H2>
<P>Date comparisons are also possible, using the full suite of ``&lt;'', ``&gt;'',
``&lt;='', ``&gt;='', ``&lt;=&gt;'', ``=='' and ``!=''.</P>
<P>
<H2><A NAME="global overriding">Global Overriding</A></H2>
<P>Finally, it's possible to override localtime and gmtime everywhere, by
including the 'overrideGlobally' tag in the import list:</P>
<PRE>
        use Time::Object 'overrideGlobally';</PRE>
<P>I'm not too keen on this name yet - suggestions welcome...</P>
<P>
<HR>
<H1><A NAME="author">AUTHOR</A></H1>
<P>Matt Sergeant, <A HREF="mailto:matt@sergeant.org">matt@sergeant.org</A></P>
<P>
<H2><A NAME="license">License</A></H2>
<P>This module is free software, you may distribute it under the same terms
as Perl.</P>
<P>
<H2><A NAME="bugs">Bugs</A></H2>
<P>The test harness leaves much to be desired. Patches welcome.</P>




</body>
</html>
